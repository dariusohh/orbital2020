{"ast":null,"code":"var _jsxFileName = \"/Users/darius/Desktop/orbital2020/frontend/src/components/Profile/line.js\";\nimport React from 'react';\nimport { Line } from 'react-chartjs-2';\nimport axios from 'axios';\naxios.defaults.baseURL = 'http://127.0.0.1:8000/';\nexport class Graph2 extends React.Component {\n  render() {\n    const month_profit = {};\n    const month_revenue = {};\n    const month_expense = {};\n\n    for (var j = 11; j >= 0; j--) {\n      var mthyeardate = new Date(new Date().getFullYear(), new Date().getMonth() - j);\n      var mthyear = mthyeardate.toLocaleDateString().slice(3, 6) + mthyeardate.toLocaleDateString().slice(8, 10);\n      month_profit[mthyear] = 0;\n      month_revenue[mthyear] = 0;\n      month_expense[mthyear] = 0;\n    }\n\n    this.props.data.forEach(x => {\n      const objyear = x.created_at.substring(0, 4);\n      const objmth = x.created_at.substring(5, 7) - 1;\n      const objday = x.created_at.substring(8, 10);\n      const objhour = parseInt(x.created_at.substring(11, 13)) + 8;\n      const objmin = x.created_at.substring(14, 16);\n      const objsec = x.created_at.substring(17, 19);\n      const createddate = new Date(objyear, objmth, objday, objhour, objmin, objsec);\n      const created = createddate.toLocaleDateString().slice(3, 6) + createddate.toLocaleDateString().slice(8, 10);\n      month_profit[created] += parseFloat(x.amount);\n\n      if (x.amount > 0) {\n        month_revenue[created] += parseFloat(x.amount);\n      } else {\n        month_expense[created] -= parseFloat(x.amount);\n      }\n    });\n    const mth_xlabels = Object.keys(month_profit);\n    var mthprofit_label = [];\n    var mthrevenue_label = [];\n    var mthexpense_label = [];\n\n    for (let x of mth_xlabels) {\n      mthprofit_label.push(month_profit[x]);\n      mthrevenue_label.push(month_revenue[x]);\n      mthexpense_label.push(month_expense[x]);\n    }\n\n    const data = {\n      labels: xlabels,\n      datasets: [{\n        label: 'Profit Progress',\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: 'rgba(75,192,192,0.4)',\n        borderColor: 'DarkMagenta',\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: 'miter',\n        pointBorderColor: 'DarkMagenta',\n        pointBackgroundColor: '#fff',\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: 'DarkMagenta',\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: ylabels\n      }]\n    };\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Line, {\n      data: data,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"text\", {\n      style: {\n        fontSize: 30,\n        color: 'DarkSlateGray',\n        textAlign: \"center\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }\n    }, \"Current Profit: SGD $\", this.props.data.map(transaction => transaction.amount).map(num => parseFloat(num)).reduce((acc, item) => acc += item, 0).toFixed(2)));\n  }\n\n}\nexport default Graph2;","map":{"version":3,"sources":["/Users/darius/Desktop/orbital2020/frontend/src/components/Profile/line.js"],"names":["React","Line","axios","defaults","baseURL","Graph2","Component","render","month_profit","month_revenue","month_expense","j","mthyeardate","Date","getFullYear","getMonth","mthyear","toLocaleDateString","slice","props","data","forEach","x","objyear","created_at","substring","objmth","objday","objhour","parseInt","objmin","objsec","createddate","created","parseFloat","amount","mth_xlabels","Object","keys","mthprofit_label","mthrevenue_label","mthexpense_label","push","labels","xlabels","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","ylabels","fontSize","color","textAlign","map","transaction","num","reduce","acc","item","toFixed"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,IAAR,QAAmB,iBAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAGAA,KAAK,CAACC,QAAN,CAAeC,OAAf,GAAyB,wBAAzB;AAEA,OAAO,MAAOC,MAAP,SAAsBL,KAAK,CAACM,SAA5B,CAAsC;AAE7CC,EAAAA,MAAM,GAAG;AAEP,UAAMC,YAAY,GAAG,EAArB;AACA,UAAMC,aAAa,GAAG,EAAtB;AACA,UAAMC,aAAa,GAAG,EAAtB;;AACA,SAAK,IAAIC,CAAC,GAAG,EAAb,EAAiBA,CAAC,IAAI,CAAtB,EAAyBA,CAAC,EAA1B,EAA8B;AAC5B,UAAIC,WAAW,GAAG,IAAIC,IAAJ,CAAS,IAAIA,IAAJ,GAAWC,WAAX,EAAT,EAAkC,IAAID,IAAJ,GAAWE,QAAX,KAAwBJ,CAA1D,CAAlB;AACA,UAAIK,OAAO,GAAGJ,WAAW,CAACK,kBAAZ,GAAiCC,KAAjC,CAAuC,CAAvC,EAAyC,CAAzC,IAA8CN,WAAW,CAACK,kBAAZ,GAAiCC,KAAjC,CAAuC,CAAvC,EAAyC,EAAzC,CAA5D;AACAV,MAAAA,YAAY,CAACQ,OAAD,CAAZ,GAAwB,CAAxB;AACAP,MAAAA,aAAa,CAACO,OAAD,CAAb,GAAyB,CAAzB;AACAN,MAAAA,aAAa,CAACM,OAAD,CAAb,GAAyB,CAAzB;AACD;;AAED,SAAKG,KAAL,CAAWC,IAAX,CAAgBC,OAAhB,CAAwBC,CAAC,IAAI;AAC3B,YAAMC,OAAO,GAAGD,CAAC,CAACE,UAAF,CAAaC,SAAb,CAAuB,CAAvB,EAAyB,CAAzB,CAAhB;AACA,YAAMC,MAAM,GAAGJ,CAAC,CAACE,UAAF,CAAaC,SAAb,CAAuB,CAAvB,EAAyB,CAAzB,IAA8B,CAA7C;AACA,YAAME,MAAM,GAAGL,CAAC,CAACE,UAAF,CAAaC,SAAb,CAAuB,CAAvB,EAAyB,EAAzB,CAAf;AACA,YAAMG,OAAO,GAAGC,QAAQ,CAACP,CAAC,CAACE,UAAF,CAAaC,SAAb,CAAuB,EAAvB,EAA0B,EAA1B,CAAD,CAAR,GAA0C,CAA1D;AACA,YAAMK,MAAM,GAAGR,CAAC,CAACE,UAAF,CAAaC,SAAb,CAAuB,EAAvB,EAA0B,EAA1B,CAAf;AACA,YAAMM,MAAM,GAAGT,CAAC,CAACE,UAAF,CAAaC,SAAb,CAAuB,EAAvB,EAA0B,EAA1B,CAAf;AACA,YAAMO,WAAW,GAAG,IAAInB,IAAJ,CAASU,OAAT,EAAiBG,MAAjB,EAAwBC,MAAxB,EAAgCC,OAAhC,EAAyCE,MAAzC,EAAiDC,MAAjD,CAApB;AACA,YAAME,OAAO,GAAGD,WAAW,CAACf,kBAAZ,GAAiCC,KAAjC,CAAuC,CAAvC,EAAyC,CAAzC,IAA8Cc,WAAW,CAACf,kBAAZ,GAAiCC,KAAjC,CAAuC,CAAvC,EAAyC,EAAzC,CAA9D;AACAV,MAAAA,YAAY,CAACyB,OAAD,CAAZ,IAAyBC,UAAU,CAACZ,CAAC,CAACa,MAAH,CAAnC;;AACA,UAAIb,CAAC,CAACa,MAAF,GAAW,CAAf,EAAkB;AAChB1B,QAAAA,aAAa,CAACwB,OAAD,CAAb,IAA0BC,UAAU,CAACZ,CAAC,CAACa,MAAH,CAApC;AACD,OAFD,MAEO;AACLzB,QAAAA,aAAa,CAACuB,OAAD,CAAb,IAA0BC,UAAU,CAACZ,CAAC,CAACa,MAAH,CAApC;AACD;AACF,KAfD;AAiBA,UAAMC,WAAW,GAAGC,MAAM,CAACC,IAAP,CAAY9B,YAAZ,CAApB;AACA,QAAI+B,eAAe,GAAG,EAAtB;AACA,QAAIC,gBAAgB,GAAG,EAAvB;AACA,QAAIC,gBAAgB,GAAG,EAAvB;;AACA,SAAK,IAAInB,CAAT,IAAcc,WAAd,EAA2B;AACzBG,MAAAA,eAAe,CAACG,IAAhB,CAAqBlC,YAAY,CAACc,CAAD,CAAjC;AACAkB,MAAAA,gBAAgB,CAACE,IAAjB,CAAsBjC,aAAa,CAACa,CAAD,CAAnC;AACAmB,MAAAA,gBAAgB,CAACC,IAAjB,CAAsBhC,aAAa,CAACY,CAAD,CAAnC;AACD;;AACC,UAAMF,IAAI,GAAG;AACTuB,MAAAA,MAAM,EAAEC,OADC;AAETC,MAAAA,QAAQ,EAAE,CACR;AACEC,QAAAA,KAAK,EAAE,iBADT;AAEEC,QAAAA,IAAI,EAAE,KAFR;AAGEC,QAAAA,WAAW,EAAE,GAHf;AAIEC,QAAAA,eAAe,EAAE,sBAJnB;AAKEC,QAAAA,WAAW,EAAC,aALd;AAMEC,QAAAA,cAAc,EAAE,MANlB;AAOEC,QAAAA,UAAU,EAAE,EAPd;AAQEC,QAAAA,gBAAgB,EAAE,GARpB;AASEC,QAAAA,eAAe,EAAE,OATnB;AAUEC,QAAAA,gBAAgB,EAAE,aAVpB;AAWEC,QAAAA,oBAAoB,EAAE,MAXxB;AAYEC,QAAAA,gBAAgB,EAAE,CAZpB;AAaEC,QAAAA,gBAAgB,EAAE,CAbpB;AAcEC,QAAAA,yBAAyB,EAAE,aAd7B;AAeEC,QAAAA,qBAAqB,EAAE,qBAfzB;AAgBEC,QAAAA,qBAAqB,EAAE,CAhBzB;AAiBEC,QAAAA,WAAW,EAAE,CAjBf;AAkBEC,QAAAA,cAAc,EAAE,EAlBlB;AAmBE3C,QAAAA,IAAI,EAAE4C;AAnBR,OADQ;AAFD,KAAb;AA4BA,wBAEG,uDACC,oBAAC,IAAD;AAAM,MAAA,IAAI,EAAE5C,IAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,eAEC;AAAM,MAAA,KAAK,EAAG;AAAC6C,QAAAA,QAAQ,EAAC,EAAV;AAAcC,QAAAA,KAAK,EAAC,eAApB;AAAqCC,QAAAA,SAAS,EAAC;AAA/C,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCACkB,KAAKhD,KAAL,CAAWC,IAAX,CACfgD,GADe,CACXC,WAAW,IAAIA,WAAW,CAAClC,MADhB,EAEfiC,GAFe,CAEXE,GAAG,IAAIpC,UAAU,CAACoC,GAAD,CAFN,EAGfC,MAHe,CAGR,CAACC,GAAD,EAAMC,IAAN,KAAgBD,GAAG,IAAIC,IAHf,EAGsB,CAHtB,EAGyBC,OAHzB,CAGiC,CAHjC,CADlB,CAFD,CAFH;AAaH;;AAlF4C;AAuF7C,eAAerE,MAAf","sourcesContent":["import React from 'react';\nimport {Line} from 'react-chartjs-2';\nimport axios from 'axios';\n\n\naxios.defaults.baseURL = 'http://127.0.0.1:8000/';\n\nexport class  Graph2 extends React.Component {\n \nrender() {\n\n  const month_profit = {}\n  const month_revenue = {}\n  const month_expense = {}\n  for (var j = 11; j >= 0; j--) {\n    var mthyeardate = new Date(new Date().getFullYear(),new Date().getMonth() - j)\n    var mthyear = mthyeardate.toLocaleDateString().slice(3,6) + mthyeardate.toLocaleDateString().slice(8,10)\n    month_profit[mthyear] = 0\n    month_revenue[mthyear] = 0\n    month_expense[mthyear] = 0\n  }\n\n  this.props.data.forEach(x => {\n    const objyear = x.created_at.substring(0,4)\n    const objmth = x.created_at.substring(5,7) - 1\n    const objday = x.created_at.substring(8,10)\n    const objhour = parseInt(x.created_at.substring(11,13)) + 8\n    const objmin = x.created_at.substring(14,16)\n    const objsec = x.created_at.substring(17,19)\n    const createddate = new Date(objyear,objmth,objday, objhour, objmin, objsec)\n    const created = createddate.toLocaleDateString().slice(3,6) + createddate.toLocaleDateString().slice(8,10)\n    month_profit[created] += parseFloat(x.amount)\n    if (x.amount > 0) {\n      month_revenue[created] += parseFloat(x.amount)\n    } else {\n      month_expense[created] -= parseFloat(x.amount)\n    }\n  })\n\n  const mth_xlabels = Object.keys(month_profit)\n  var mthprofit_label = []\n  var mthrevenue_label = []\n  var mthexpense_label = []\n  for (let x of mth_xlabels) {\n    mthprofit_label.push(month_profit[x])\n    mthrevenue_label.push(month_revenue[x])\n    mthexpense_label.push(month_expense[x])\n  }\n    const data = {\n        labels: xlabels,\n        datasets: [\n          {\n            label: 'Profit Progress',\n            fill: false,\n            lineTension: 0.1,\n            backgroundColor: 'rgba(75,192,192,0.4)',\n            borderColor:'DarkMagenta',\n            borderCapStyle: 'butt',\n            borderDash: [],\n            borderDashOffset: 0.0,\n            borderJoinStyle: 'miter',\n            pointBorderColor: 'DarkMagenta',\n            pointBackgroundColor: '#fff',\n            pointBorderWidth: 1,\n            pointHoverRadius: 5,\n            pointHoverBackgroundColor: 'DarkMagenta',\n            pointHoverBorderColor: 'rgba(220,220,220,1)',\n            pointHoverBorderWidth: 2,\n            pointRadius: 1,\n            pointHitRadius: 10,\n            data: ylabels\n          }\n        ]\n      };\n      \n    \n    return (\n    \n       <>\n        <Line data={data} />\n        <text style= {{fontSize:30, color:'DarkSlateGray', textAlign:\"center\"}}>\n    Current Profit: SGD ${this.props.data\n          .map(transaction => transaction.amount)\n          .map(num => parseFloat(num))\n          .reduce((acc, item) => (acc += item), 0).toFixed(2)}\n   </text>\n     </>\n    \n    )\n}\n\n}\n\n\nexport default Graph2;\n"]},"metadata":{},"sourceType":"module"}