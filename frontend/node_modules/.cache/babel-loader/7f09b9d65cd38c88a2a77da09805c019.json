{"ast":null,"code":"var _jsxFileName = \"/Users/darius/Desktop/orbital2020/frontend/src/components/login/Register.js\";\nimport React from 'react';\nimport * as actions from '../../store/actions/auth';\nimport { connect } from 'react-redux';\nimport './Login.css';\nimport { useForm } from \"react-hook-form\";\n\nfunction RegisterForm({\n  onAuth\n}) {\n  const {\n    register,\n    handleSubmit,\n    errors,\n    watch\n  } = useForm();\n  const password = useRef({});\n  password.current = watch(\"password\", \"\");\n\n  const onSubmit = e => {\n    console.log(e); // this.props.onAuth(e.target.username.values, \n    //   e.target.email.values,\n    //   e.target.password.values,\n    //   e.target.confirm.values)\n    // this.props.history.push('/');\n  };\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Username\",\n    name: \"username\",\n    ref: register({\n      required: true\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 11\n    }\n  }), errors.username && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 31\n    }\n  }, \"Username is required!\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Email\",\n    name: \"email\",\n    ref: register({\n      required: true,\n      pattern: /^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 11\n    }\n  }), errors.email && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 28\n    }\n  }, \"Email is invalid!\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"password\",\n    placeholder: \"Password\",\n    name: \"password\",\n    ref: register({\n      required: true,\n      minLength: 8\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 11\n    }\n  }), errors.password && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 33\n    }\n  }, \"Password should have at least 8 characters\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }\n  }, \"Sign Up\"), /*#__PURE__*/React.createElement(\"input\", {\n    name: \"confirm\",\n    placeholder: \"Confirm Password\",\n    type: \"password\",\n    ref: register({\n      validate: value => value === password.current || \"The passwords do not match\"\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 11\n    }\n  }), errors.password_repeat && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 34\n    }\n  }, errors.password_repeat.message));\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (username, email, password1, password2) => {\n      dispatch(actions.authSignup(username, email, password1, password2));\n    }\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(RegisterForm);","map":{"version":3,"sources":["/Users/darius/Desktop/orbital2020/frontend/src/components/login/Register.js"],"names":["React","actions","connect","useForm","RegisterForm","onAuth","register","handleSubmit","errors","watch","password","useRef","current","onSubmit","e","console","log","required","username","pattern","email","minLength","validate","value","password_repeat","message","mapDispatchToProps","dispatch","password1","password2","authSignup"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,OAAZ,MAAyB,0BAAzB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAO,aAAP;AACA,SAAQC,OAAR,QAAsB,iBAAtB;;AAEA,SAASC,YAAT,CAAsB;AAAEC,EAAAA;AAAF,CAAtB,EAAkC;AAChC,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,YAAZ;AAA0BC,IAAAA,MAA1B;AAAkCC,IAAAA;AAAlC,MAA4CN,OAAO,EAAzD;AACA,QAAMO,QAAQ,GAAGC,MAAM,CAAC,EAAD,CAAvB;AACAD,EAAAA,QAAQ,CAACE,OAAT,GAAmBH,KAAK,CAAC,UAAD,EAAa,EAAb,CAAxB;;AAEA,QAAMI,QAAQ,GAAGC,CAAC,IAAI;AAChBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ,EADgB,CAEhB;AACA;AACA;AACA;AACA;AACH,GAPH;;AASI,sBACE;AAAM,IAAA,QAAQ,EAAIP,YAAY,CAACM,QAAD,CAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,WAAW,EAAC,UAA/B;AAA0C,IAAA,IAAI,EAAC,UAA/C;AAA0D,IAAA,GAAG,EAAEP,QAAQ,CAAC;AAACW,MAAAA,QAAQ,EAAC;AAAV,KAAD,CAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEGT,MAAM,CAACU,QAAP,iBAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAFtB,eAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHA,eAIE;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,WAAW,EAAC,OAA/B;AAAuC,IAAA,IAAI,EAAC,OAA5C;AAAoD,IAAA,GAAG,EAAEZ,QAAQ,CAAC;AAACW,MAAAA,QAAQ,EAAC,IAAV;AAAgBE,MAAAA,OAAO,EAAC;AAAxB,KAAD,CAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,EAKGX,MAAM,CAACY,KAAP,iBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBALnB,eAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANA,eAOE;AACE,IAAA,IAAI,EAAG,UADT;AAEE,IAAA,WAAW,EAAC,UAFd;AAGE,IAAA,IAAI,EAAC,UAHP;AAIE,IAAA,GAAG,EAAEd,QAAQ,CAAC;AAACW,MAAAA,QAAQ,EAAC,IAAV;AAAeI,MAAAA,SAAS,EAAC;AAAzB,KAAD,CAJf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,EAaKb,MAAM,CAACE,QAAP,iBAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kDAbxB,eAcE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAdF,eAeE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAfF,eAgBI;AAAQ,IAAA,IAAI,EAAG,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAhBJ,eAiBE;AACF,IAAA,IAAI,EAAC,SADH;AAEF,IAAA,WAAW,EAAG,kBAFZ;AAGF,IAAA,IAAI,EAAC,UAHH;AAIF,IAAA,GAAG,EAAEJ,QAAQ,CAAC;AACZgB,MAAAA,QAAQ,EAAEC,KAAK,IACbA,KAAK,KAAKb,QAAQ,CAACE,OAAnB,IAA8B;AAFpB,KAAD,CAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAjBF,EA0BDJ,MAAM,CAACgB,eAAP,iBAA0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIhB,MAAM,CAACgB,eAAP,CAAuBC,OAA3B,CA1BzB,CADF;AA+BL;;AAED,MAAMC,kBAAkB,GAAGC,QAAQ,IAAI;AACnC,SAAO;AACHtB,IAAAA,MAAM,EAAE,CAACa,QAAD,EAAWE,KAAX,EAAkBQ,SAAlB,EAA6BC,SAA7B,KAA2C;AAC/CF,MAAAA,QAAQ,CAAC1B,OAAO,CAAC6B,UAAR,CAAmBZ,QAAnB,EAA4BE,KAA5B,EAAmCQ,SAAnC,EAA6CC,SAA7C,CAAD,CAAR;AACH;AAHE,GAAP;AAKH,CAND;;AAQA,eAAe3B,OAAO,CAAC,IAAD,EAAMwB,kBAAN,CAAP,CAAiCtB,YAAjC,CAAf","sourcesContent":["import React from 'react';\nimport * as actions from '../../store/actions/auth'\nimport { connect } from 'react-redux'; \nimport './Login.css';\nimport {useForm} from \"react-hook-form\";\n\nfunction RegisterForm({ onAuth }) {\n  const { register, handleSubmit, errors, watch } = useForm();\n  const password = useRef({});\n  password.current = watch(\"password\", \"\");\n\n  const onSubmit = e => {\n        console.log(e);\n        // this.props.onAuth(e.target.username.values, \n        //   e.target.email.values,\n        //   e.target.password.values,\n        //   e.target.confirm.values)\n        // this.props.history.push('/');\n    }\n\n      return (\n        <form onSubmit = {handleSubmit(onSubmit)}>\n          <input type=\"text\" placeholder=\"Username\" name=\"username\" ref={register({required:true})} />\n          {errors.username && <p>Username is required!</p>}\n        <br/>\n          <input type=\"text\" placeholder=\"Email\" name=\"email\" ref={register({required:true, pattern:/^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/})}/>\n          {errors.email && <p>Email is invalid!</p>}\n        <br/>\n          <input\n            type = \"password\"\n            placeholder=\"Password\"\n            name=\"password\"\n            ref={register({required:true,minLength:8})}\n            />\n            {errors.password && <p>Password should have at least 8 characters</p>}\n          <br/>\n          <br/>\n            <button type = \"submit\">Sign Up</button>\n          <input\n        name=\"confirm\"\n        placeholder = \"Confirm Password\"\n        type=\"password\"\n        ref={register({\n          validate: value =>\n            value === password.current || \"The passwords do not match\"\n        })}\n      />\n      {errors.password_repeat && <p>{errors.password_repeat.message}</p>}\n        </form>\n      );\n\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAuth: (username, email, password1, password2) => {\n            dispatch(actions.authSignup(username,email, password1,password2))\n        }\n    }\n}\n\nexport default connect(null,mapDispatchToProps)(RegisterForm);"]},"metadata":{},"sourceType":"module"}