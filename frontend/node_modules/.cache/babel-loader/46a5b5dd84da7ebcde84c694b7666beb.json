{"ast":null,"code":"var _jsxFileName = \"/Users/darius/Desktop/orbital2020/frontend/src/components/Prediction/Profit.js\";\nimport React from 'react';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\nimport Chart from \"react-apexcharts\";\naxios.defaults.baseURL = 'http://127.0.0.1:8000/';\nexport class ProfitGraph extends React.Component {\n  render() {\n    const month_profit = {};\n\n    for (var j = 5; j >= 0; j--) {\n      var mthyeardate = new Date(new Date().getFullYear(), new Date().getMonth() - j);\n      var mthyear = mthyeardate.toLocaleDateString().slice(3, 6) + mthyeardate.toLocaleDateString().slice(8, 10);\n      month_profit[mthyear] = 0;\n    }\n\n    for (var k = 1; k < 6; k++) {\n      mthyeardate = new Date(new Date().getFullYear(), new Date().getMonth() + k);\n      mthyear = mthyeardate.toLocaleDateString().slice(3, 6) + mthyeardate.toLocaleDateString().slice(8, 10);\n      month_profit[mthyear] = 0;\n    }\n\n    var month_predictions = {};\n    Object.assign(month_predictions, month_profit);\n    this.props.prediction.revenue_pred.forEach(x => {\n      const objyear = x.date.substring(2, 4);\n      const objmth = x.date.substring(5, 7);\n      month_predictions[objmth + \"/\" + objyear] = x.value;\n    });\n    this.props.prediction.expense_pred.forEach(x => {\n      const objyear = x.date.substring(2, 4);\n      const objmth = x.date.substring(5, 7);\n      month_predictions[objmth + \"/\" + objyear] += x.value;\n    });\n    this.props.data.forEach(x => {\n      const objyear = x.created_at.substring(0, 4);\n      const objmth = x.created_at.substring(5, 7) - 1;\n      const objday = x.created_at.substring(8, 10);\n      const objhour = parseInt(x.created_at.substring(11, 13)) + 8;\n      const objmin = x.created_at.substring(14, 16);\n      const objsec = x.created_at.substring(17, 19);\n      const createddate = new Date(objyear, objmth, objday, objhour, objmin, objsec);\n      const created = createddate.toLocaleDateString().slice(3, 6) + createddate.toLocaleDateString().slice(8, 10);\n      month_profit[created] += parseFloat(x.amount);\n    });\n    const mth_xlabels = Object.keys(month_profit);\n    var mthprofit_label = [];\n    var pred_label = [];\n\n    for (let x of mth_xlabels) {\n      mthprofit_label.push(month_profit[x].toFixed(2));\n      pred_label.push(month_predictions[x].toFixed(2));\n    }\n\n    const series = [{\n      name: 'Actual',\n      type: 'column',\n      data: mthprofit_label\n    }, {\n      name: 'Predict',\n      type: 'line',\n      data: pred_label\n    }];\n    const options = {\n      colors: [\"rgb(0,191,255)\", \"rgb(139,0,139)\"],\n      chart: {\n        width: '100%'\n      },\n      stroke: {\n        width: [0, 4]\n      },\n      dataLabels: {\n        enabled: true,\n        enabledOnSeries: [1]\n      },\n      labels: mth_xlabels,\n      xaxis: {\n        type: 'datetime'\n      },\n      yaxis: {\n        title: {\n          text: 'Expense'\n        }\n      }\n    };\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"chart\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Chart, {\n      options: options,\n      series: series,\n      type: \"line\",\n      height: 350,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }\n    })));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    token: state.token\n  };\n};\n\nexport default connect(mapStateToProps)(ProfitGraph);","map":{"version":3,"sources":["/Users/darius/Desktop/orbital2020/frontend/src/components/Prediction/Profit.js"],"names":["React","axios","connect","Chart","defaults","baseURL","ProfitGraph","Component","render","month_profit","j","mthyeardate","Date","getFullYear","getMonth","mthyear","toLocaleDateString","slice","k","month_predictions","Object","assign","props","prediction","revenue_pred","forEach","x","objyear","date","substring","objmth","value","expense_pred","data","created_at","objday","objhour","parseInt","objmin","objsec","createddate","created","parseFloat","amount","mth_xlabels","keys","mthprofit_label","pred_label","push","toFixed","series","name","type","options","colors","chart","width","stroke","dataLabels","enabled","enabledOnSeries","labels","xaxis","yaxis","title","text","mapStateToProps","state","token"],"mappings":"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","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\nimport Chart from \"react-apexcharts\";\naxios.defaults.baseURL = 'http://127.0.0.1:8000/';\n\nexport class ProfitGraph extends React.Component {\n        \n\nrender() {\n    \n\n  const month_profit = {}\n  for (var j = 5; j >= 0; j--) {\n    var mthyeardate = new Date(new Date().getFullYear(),new Date().getMonth() - j)\n    var mthyear = mthyeardate.toLocaleDateString().slice(3,6) + mthyeardate.toLocaleDateString().slice(8,10)\n    month_profit[mthyear] = 0\n  }\n\n  for (var k = 1; k < 6; k++) {\n    mthyeardate = new Date(new Date().getFullYear(),new Date().getMonth() + k)\n    mthyear = mthyeardate.toLocaleDateString().slice(3,6) + mthyeardate.toLocaleDateString().slice(8,10)\n    month_profit[mthyear] = 0\n  }\n\n  var month_predictions = {};\n  Object.assign(month_predictions,month_profit);\n  this.props.prediction.revenue_pred.forEach(x => {\n    const objyear = x.date.substring(2,4)\n    const objmth = x.date.substring(5,7)\n    month_predictions[objmth + \"/\" + objyear] = x.value\n  })\n\n  this.props.prediction.expense_pred.forEach(x => {\n    const objyear = x.date.substring(2,4)\n    const objmth = x.date.substring(5,7)\n    month_predictions[objmth + \"/\" + objyear] += x.value\n  })\n\n  this.props.data.forEach(x => {\n    const objyear = x.created_at.substring(0,4)\n    const objmth = x.created_at.substring(5,7) - 1\n    const objday = x.created_at.substring(8,10)\n    const objhour = parseInt(x.created_at.substring(11,13)) + 8\n    const objmin = x.created_at.substring(14,16)\n    const objsec = x.created_at.substring(17,19)\n    const createddate = new Date(objyear,objmth,objday, objhour, objmin, objsec)\n    const created = createddate.toLocaleDateString().slice(3,6) + createddate.toLocaleDateString().slice(8,10)\n    month_profit[created] += parseFloat(x.amount)\n  })\n\n  const mth_xlabels = Object.keys(month_profit)\n  var mthprofit_label = []\n  var pred_label = []\n  for (let x of mth_xlabels) {\n    mthprofit_label.push(month_profit[x].toFixed(2))\n    pred_label.push(month_predictions[x].toFixed(2))\n  }\n\nconst series = [{\n    name: 'Actual',\n    type: 'column',\n    data: mthprofit_label\n  }, {\n    name: 'Predict',\n    type: 'line',\n    data: pred_label\n  }]\n\nconst options = {\n    colors:[\"rgb(0,191,255)\",\"rgb(139,0,139)\"],\n    chart: {\n      width: '100%'\n    },\n    stroke: {\n      width: [0, 4],\n    },\n    dataLabels: {\n      enabled: true,\n      enabledOnSeries: [1],\n    },\n    labels: mth_xlabels,\n    xaxis: {\n      type: 'datetime'\n    },\n    yaxis: {\n      title: {\n        text: 'Expense',\n      }\n    }\n}\n\n    return (\n        <>\n    \n        <div id=\"chart\">\n        <Chart options={options} series={series} type=\"line\" height={350} />\n      </div>\n      </>\n    )\n}\n\n}\n\nconst mapStateToProps = state => {\n  return {\n      token: state.token\n  }\n}\n\nexport default connect(mapStateToProps)(ProfitGraph);"]},"metadata":{},"sourceType":"module"}