{"ast":null,"code":"var _jsxFileName = \"/Users/darius/Desktop/orbital2020/frontend/src/components/Visual/bar.js\";\nimport { Bar } from 'react-chartjs-2';\nimport React from 'react';\nimport { Link } from \"react-router-dom\";\nimport axios from 'axios';\nimport { connect } from 'react-redux';\naxios.defaults.baseURL = 'http://127.0.0.1:8000/';\nexport class BarGraph extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      expense: []\n    };\n  }\n\n  componentDidMount() {\n    setTimeout(() => axios.get('api/').then(res => {\n      const new_res = res.data.filter(x => x.username === localStorage.getItem(\"username\"));\n      this.setState({\n        expense: new_res\n      });\n    }), 200);\n  }\n\n  render() {\n    var grouping = {};\n    this.props.data.filter(item => item.amount < 0).forEach(x => {\n      if (x.name in grouping) {\n        grouping[x.name] += -parseFloat(x.amount);\n      } else {\n        grouping[x.name] = -parseFloat(x.amount);\n      }\n    });\n    const xlabels = Object.keys(grouping).sort();\n    var ylabels = [];\n\n    for (let x of xlabels) {\n      ylabels.push(grouping[x]);\n    }\n\n    const data = {\n      labels: xlabels,\n      datasets: [{\n        label: 'Expense',\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: 'rgba(75,192,192,0.4)',\n        borderColor: 'rgba(75,192,192,1)',\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: 'miter',\n        pointBorderColor: 'rgba(75,192,192,1)',\n        pointBackgroundColor: '#fff',\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: ylabels\n      }]\n    };\n    var options = {\n      legend: {\n        display: false\n      },\n      scales: {\n        xAxes: [{\n          gridLines: {\n            display: false\n          }\n        }],\n        yAxes: [{\n          gridLines: {\n            display: true\n          }\n        }]\n      }\n    };\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"text2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 14\n      }\n    }, \" Expense Breakdown\"), /*#__PURE__*/React.createElement(Bar, {\n      data: data,\n      options: options,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(Link, {\n      to: \"/Login\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 14\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"Btn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }\n    }, \"More\")));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    token: state.token\n  };\n};\n\nexport default connect(mapStateToProps)(BarGraph);","map":{"version":3,"sources":["/Users/darius/Desktop/orbital2020/frontend/src/components/Visual/bar.js"],"names":["Bar","React","Link","axios","connect","defaults","baseURL","BarGraph","Component","state","expense","componentDidMount","setTimeout","get","then","res","new_res","data","filter","x","username","localStorage","getItem","setState","render","grouping","props","item","amount","forEach","name","parseFloat","xlabels","Object","keys","sort","ylabels","push","labels","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","options","legend","display","scales","xAxes","gridLines","yAxes","mapStateToProps","token"],"mappings":"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","sourcesContent":["import {Bar} from 'react-chartjs-2';\nimport React from 'react';\nimport {Link } from \"react-router-dom\"; \nimport axios from 'axios';\nimport { connect } from 'react-redux';\n\naxios.defaults.baseURL = 'http://127.0.0.1:8000/';\n\nexport class BarGraph extends React.Component  {\n    \n  state = {\n    expense: []\n}\n\ncomponentDidMount() {\n    setTimeout(() => \n      axios.get('api/')\n      .then(res => {\n          const new_res = res.data.filter(x => x.username === localStorage.getItem(\"username\"));\n          this.setState({\n              expense: new_res\n          });\n      }), 200);\n  }\n\nrender() {\n  var grouping = {};\n  this.props.data.filter(item => item.amount < 0).forEach(x => {\n    if (x.name in grouping) {\n      grouping[x.name] += -parseFloat(x.amount)\n    } else {\n      grouping[x.name] = -parseFloat(x.amount)\n    }\n  })\n  const xlabels = Object.keys(grouping).sort()\n  var ylabels = []\n  for (let x of xlabels) {\n    ylabels.push(grouping[x])\n  }\n    \n    const data = {\n          labels: xlabels,\n        datasets: [\n          {\n          \n            label: 'Expense',\n            fill: false,\n            lineTension: 0.1,\n            backgroundColor: 'rgba(75,192,192,0.4)',\n            borderColor: 'rgba(75,192,192,1)',\n            borderCapStyle: 'butt',\n            borderDash: [],\n            borderDashOffset: 0.0,\n            borderJoinStyle: 'miter',\n            pointBorderColor: 'rgba(75,192,192,1)',\n            pointBackgroundColor: '#fff',\n            pointBorderWidth: 1,\n            pointHoverRadius: 5,\n            pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n            pointHoverBorderColor: 'rgba(220,220,220,1)',\n            pointHoverBorderWidth: 2,\n            pointRadius: 1,\n            pointHitRadius: 10,\n            data: ylabels\n          }\n        ]\n      };\n\n      var options = {\n        legend:{display:false},\n        scales:{\n        xAxes:[{gridLines:{display:false}}],\n        yAxes:[{gridLines:{display:true}}]\n        }\n      }\n\n    return (\n        <div>\n             <h2 className='text2'> Expense Breakdown</h2>\n             <Bar \n             data={data} options = {options}/>\n             <Link to=\"/Login\">\n            <button className=\"Btn\">\n              More\n            </button>\n            </Link>\n        </div>\n      \n    )\n}\n}\n\nconst mapStateToProps = state => {\n  return {\n      token: state.token\n  }\n}\n\nexport default connect(mapStateToProps)(BarGraph);\n\n\n"]},"metadata":{},"sourceType":"module"}