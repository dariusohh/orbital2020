{"ast":null,"code":"var _jsxFileName = \"/Users/darius/Desktop/orbital2020/frontend/src/components/login/Register.js\";\nimport React, { useRef } from 'react';\nimport * as actions from '../../store/actions/auth';\nimport { connect } from 'react-redux';\nimport './Login.css';\nimport { useForm } from \"react-hook-form\";\nimport { useHistory } from \"react-router\";\n\nfunction RegisterForm({\n  props\n}) {\n  const {\n    register,\n    handleSubmit,\n    errors,\n    watch\n  } = useForm();\n  const password = useRef({});\n  password.current = watch(\"password\", \"\");\n  const history = useHistory();\n\n  const onSubmit = e => {\n    props.onAuth(e.username, e.email, e.password, e.confirm);\n    setTimeout(() => {\n      if (props.error) {\n        history.push('/expense/');\n      }\n    }, 400);\n  }; // let errorMessage = null;\n  //   if (props.error) {\n  //       errorMessage = (\n  //           <p>Username/email already exist!</p>\n  //       )\n  //   }\n\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }, \"\\\\\", /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Username\",\n    name: \"username\",\n    ref: register({\n      required: \"Username is required\"\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 11\n    }\n  }), errors.username && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 31\n    }\n  }, errors.username.message), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Email\",\n    name: \"email\",\n    ref: register({\n      required: \"Email is required\",\n      pattern: {\n        value: /^[\\w-]+@([\\w-]+\\.)+[\\w-]{2,4}$/g,\n        message: \"Email is invalid\"\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 11\n    }\n  }), errors.email && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 28\n    }\n  }, errors.email.message), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"password\",\n    placeholder: \"Password\",\n    name: \"password\",\n    ref: register({\n      required: \"Password is required\",\n      minLength: {\n        value: 8,\n        message: \"Password should have minimum length of 8\"\n      },\n      pattern: {\n        value: /[^\\w\\d]*(([0-9]+.*[A-Za-z]+.*)|[A-Za-z]+.*([0-9]+.*))/,\n        message: \"Password must contain at least one letter and number\"\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 11\n    }\n  }), errors.password && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 33\n    }\n  }, errors.password.message), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    name: \"confirm\",\n    placeholder: \"Confirm Password\",\n    type: \"password\",\n    ref: register({\n      validate: value => value === password.current\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 11\n    }\n  }), errors.confirm && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 26\n    }\n  }, \"The passwords do not match\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }, \"Sign Up\"));\n}\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.loading,\n    error: state.error\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (username, email, password1, password2) => {\n      dispatch(actions.authSignup(username, email, password1, password2));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RegisterForm);","map":{"version":3,"sources":["/Users/darius/Desktop/orbital2020/frontend/src/components/login/Register.js"],"names":["React","useRef","actions","connect","useForm","useHistory","RegisterForm","props","register","handleSubmit","errors","watch","password","current","history","onSubmit","e","onAuth","username","email","confirm","setTimeout","error","push","required","message","pattern","value","minLength","validate","mapStateToProps","state","loading","mapDispatchToProps","dispatch","password1","password2","authSignup"],"mappings":"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","sourcesContent":["import React, { useRef } from 'react';\nimport * as actions from '../../store/actions/auth'\nimport { connect } from 'react-redux'; \nimport './Login.css';\nimport {useForm} from \"react-hook-form\";\nimport { useHistory } from \"react-router\"; \n\nfunction RegisterForm({ props }) {\n  const { register, handleSubmit, errors, watch } = useForm();\n  const password = useRef({});\n  password.current = watch(\"password\", \"\");\n  const history = useHistory();\n\n  const onSubmit = e => {\n      props.onAuth(e.username, \n          e.email,\n          e.password,\n          e.confirm)\n          setTimeout(() => {\n            if (props.error) {\n                history.push('/expense/');\n            }\n            },400)\n    }\n\n  // let errorMessage = null;\n  //   if (props.error) {\n  //       errorMessage = (\n  //           <p>Username/email already exist!</p>\n  //       )\n  //   }\n      return (\n          \n        <form onSubmit = {handleSubmit(onSubmit)}>\\\n       \n          <input type=\"text\" \n          placeholder=\"Username\" \n          name=\"username\" \n          ref={register({required:\"Username is required\"})} />\n          {errors.username && <p>{errors.username.message}</p>}\n        <br/>\n\n          <input type=\"text\" \n          placeholder=\"Email\" \n          name=\"email\" \n          ref={register({required:\"Email is required\", pattern:{value:/^[\\w-]+@([\\w-]+\\.)+[\\w-]{2,4}$/g,message:\"Email is invalid\"}})}/>\n          {errors.email && <p>{errors.email.message}</p>}\n        <br/>\n\n          <input\n            type = \"password\"\n            placeholder=\"Password\"\n            name=\"password\"\n            ref={register({required:\"Password is required\",\n            minLength:{value:8,message:\"Password should have minimum length of 8\"}, \n            pattern:{value:/[^\\w\\d]*(([0-9]+.*[A-Za-z]+.*)|[A-Za-z]+.*([0-9]+.*))/,message:\"Password must contain at least one letter and number\"}})}\n            />\n            {errors.password && <p>{errors.password.message}</p>}\n          <br/>\n          <br/>\n          <input\n        name=\"confirm\"\n        placeholder = \"Confirm Password\"\n        type=\"password\"\n        ref={register({\n          validate: value =>\n            value === password.current\n        })}\n      />\n      {errors.confirm && <p>The passwords do not match</p>}\n      <br/>\n      <br/>\n      <button type = \"submit\">Sign Up</button>\n        </form>\n      );\n\n}\n\nconst mapStateToProps = (state) => {\n  return {\n      loading: state.loading,\n      error: state.error\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAuth: (username, email, password1, password2) => {\n            dispatch(actions.authSignup(username,email, password1,password2))\n        }\n    }\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(RegisterForm);\n"]},"metadata":{},"sourceType":"module"}