{"ast":null,"code":"var _jsxFileName = \"/Users/darius/Desktop/orbital2020/frontend/src/components/Prediction/Revenue.js\";\nimport React from 'react';\nimport { Line } from 'react-chartjs-2';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\naxios.defaults.baseURL = 'http://127.0.0.1:8000/';\nexport class RevenueGraph extends React.Component {\n  render() {\n    const month_revenue = {};\n\n    for (var j = 5; j >= 0; j--) {\n      var mthyeardate = new Date(new Date().getFullYear(), new Date().getMonth() - j);\n      var mthyear = mthyeardate.toLocaleDateString().slice(3, 6) + mthyeardate.toLocaleDateString().slice(8, 10);\n      month_revenue[mthyear] = 0;\n    }\n\n    for (var j = 1; j < 6; j++) {\n      var mthyeardate = new Date(new Date().getFullYear(), new Date().getMonth() + j);\n      var mthyear = mthyeardate.toLocaleDateString().slice(3, 6) + mthyeardate.toLocaleDateString().slice(8, 10);\n      month_revenue[mthyear] = 0;\n    }\n\n    var month_predictions = {};\n    Object.assign(month_predictions, month_revenue);\n    this.props.prediction.forEach(x => {\n      const objyear = x.date.substring(2, 4);\n      const objmth = x.date.substring(5, 7);\n      month_predictions[objmth + \"/\" + objyear] = x.value;\n    });\n    this.props.data.forEach(x => {\n      const objyear = x.created_at.substring(0, 4);\n      const objmth = x.created_at.substring(5, 7) - 1;\n      const objday = x.created_at.substring(8, 10);\n      const objhour = parseInt(x.created_at.substring(11, 13)) + 8;\n      const objmin = x.created_at.substring(14, 16);\n      const objsec = x.created_at.substring(17, 19);\n      const createddate = new Date(objyear, objmth, objday, objhour, objmin, objsec);\n      const created = createddate.toLocaleDateString().slice(3, 6) + createddate.toLocaleDateString().slice(8, 10);\n      if (parseFloat(x.amount) > 0) month_revenue[created] += parseFloat(x.amount);\n    });\n    const mth_xlabels = Object.keys(month_revenue);\n    var mthrevenue_label = [];\n    var pred_label = [];\n\n    for (let x of mth_xlabels) {\n      mthrevenue_label.push(month_revenue[x]);\n      pred_label.push(month_predictions[x]);\n    }\n\n    const data = {\n      labels: mth_xlabels,\n      datasets: [{\n        label: 'Revenue',\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: 'rgba(41, 241, 195, 1)',\n        borderColor: 'rgba(41, 241, 195, 1)',\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: 'miter',\n        pointBorderColor: 'rgba(41, 241, 195, 1)',\n        pointBackgroundColor: '#fff',\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: 'rgba(41, 241, 195, 1)',\n        pointHoverBorderColor: 'rgba(41, 241, 195, 1)',\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: mthrevenue_label\n      }, {\n        label: 'Revenue Prediction',\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: 'rgb(139,0,139)',\n        borderColor: 'rgb(139,0,139)',\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: 'miter',\n        pointBorderColor: 'rgb(139,0,139)',\n        pointBackgroundColor: '#fff',\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: 'rgb(139,0,139)',\n        pointHoverBorderColor: 'rgb(139,0,139)',\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: pred_label\n      }]\n    };\n    var options = {\n      scales: {\n        xAxes: [{\n          gridLines: {\n            display: false\n          }\n        }],\n        yAxes: [{\n          gridLines: {\n            display: true\n          }\n        }]\n      }\n    };\n    return /*#__PURE__*/React.createElement(Line, {\n      data: data,\n      options: options,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }\n    });\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    token: state.token\n  };\n};\n\nexport default connect(mapStateToProps)(RevenueGraph);","map":{"version":3,"sources":["/Users/darius/Desktop/orbital2020/frontend/src/components/Prediction/Revenue.js"],"names":["React","Line","axios","connect","defaults","baseURL","RevenueGraph","Component","render","month_revenue","j","mthyeardate","Date","getFullYear","getMonth","mthyear","toLocaleDateString","slice","month_predictions","Object","assign","props","prediction","forEach","x","objyear","date","substring","objmth","value","data","created_at","objday","objhour","parseInt","objmin","objsec","createddate","created","parseFloat","amount","mth_xlabels","keys","mthrevenue_label","pred_label","push","labels","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","options","scales","xAxes","gridLines","display","yAxes","mapStateToProps","state","token"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {Line} from 'react-chartjs-2';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\n\naxios.defaults.baseURL = 'http://127.0.0.1:8000/';\n\nexport class RevenueGraph extends React.Component {\n\n\nrender() {\n\n  const month_revenue = {}\n  for (var j = 5; j >= 0; j--) {\n    var mthyeardate = new Date(new Date().getFullYear(),new Date().getMonth() - j)\n    var mthyear = mthyeardate.toLocaleDateString().slice(3,6) + mthyeardate.toLocaleDateString().slice(8,10)\n    month_revenue[mthyear] = 0\n  }\n\n  for (var j = 1; j < 6; j++) {\n    var mthyeardate = new Date(new Date().getFullYear(),new Date().getMonth() + j)\n    var mthyear = mthyeardate.toLocaleDateString().slice(3,6) + mthyeardate.toLocaleDateString().slice(8,10)\n    month_revenue[mthyear] = 0\n  }\n\n  var month_predictions = {};\n  Object.assign(month_predictions,month_revenue);\n  this.props.prediction.forEach(x => {\n    const objyear = x.date.substring(2,4)\n    const objmth = x.date.substring(5,7)\n    month_predictions[objmth + \"/\" + objyear] = x.value\n  })\n\n  this.props.data.forEach(x => {\n    const objyear = x.created_at.substring(0,4)\n    const objmth = x.created_at.substring(5,7) - 1\n    const objday = x.created_at.substring(8,10)\n    const objhour = parseInt(x.created_at.substring(11,13)) + 8\n    const objmin = x.created_at.substring(14,16)\n    const objsec = x.created_at.substring(17,19)\n    const createddate = new Date(objyear,objmth,objday, objhour, objmin, objsec)\n    const created = createddate.toLocaleDateString().slice(3,6) + createddate.toLocaleDateString().slice(8,10)\n      if (parseFloat(x.amount) > 0)\n      month_revenue[created] += parseFloat(x.amount)\n  })\n\n  const mth_xlabels = Object.keys(month_revenue)\n  var mthrevenue_label = []\n  var pred_label = []\n  for (let x of mth_xlabels) {\n    mthrevenue_label.push(month_revenue[x])\n    pred_label.push(month_predictions[x])\n  }\n\n    const data = {\n        labels: mth_xlabels,\n        datasets: [\n\n          {\n            label: 'Revenue',\n            fill: false,\n            lineTension: 0.1,\n            backgroundColor: 'rgba(41, 241, 195, 1)',\n            borderColor: 'rgba(41, 241, 195, 1)',\n            borderCapStyle: 'butt',\n            borderDash: [],\n            borderDashOffset: 0.0,\n            borderJoinStyle: 'miter',\n            pointBorderColor: 'rgba(41, 241, 195, 1)',\n            pointBackgroundColor: '#fff',\n            pointBorderWidth: 1,\n            pointHoverRadius: 5,\n            pointHoverBackgroundColor: 'rgba(41, 241, 195, 1)',\n            pointHoverBorderColor: 'rgba(41, 241, 195, 1)',\n            pointHoverBorderWidth: 2,\n            pointRadius: 1,\n            pointHitRadius: 10,\n            data: mthrevenue_label\n          },\n\n          {\n            label: 'Revenue Prediction',\n            fill: false,\n            lineTension: 0.1,\n            backgroundColor: 'rgb(139,0,139)',\n            borderColor: 'rgb(139,0,139)',\n            borderCapStyle: 'butt',\n            borderDash: [],\n            borderDashOffset: 0.0,\n            borderJoinStyle: 'miter',\n            pointBorderColor: 'rgb(139,0,139)',\n            pointBackgroundColor: '#fff',\n            pointBorderWidth: 1,\n            pointHoverRadius: 5,\n            pointHoverBackgroundColor: 'rgb(139,0,139)',\n            pointHoverBorderColor: 'rgb(139,0,139)',\n            pointHoverBorderWidth: 2,\n            pointRadius: 1,\n            pointHitRadius: 10,\n            data: pred_label\n          }\n\n        ]\n      };\n    \n      var options = {\n        scales:{\n        xAxes:[{gridLines:{display:false}}],\n        yAxes:[{gridLines:{display:true}}]\n        }\n      }\n\n\n    return (\n        <Line data={data} options = {options}/>\n    )\n}\n\n}\n\nconst mapStateToProps = state => {\n  return {\n      token: state.token\n  }\n}\n\nexport default connect(mapStateToProps)(RevenueGraph);\n"]},"metadata":{},"sourceType":"module"}