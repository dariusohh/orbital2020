{"ast":null,"code":"var _jsxFileName = \"/Users/darius/Desktop/orbital2020/frontend/src/components/login/Register.js\";\nimport React, { useRef } from 'react';\nimport * as actions from '../../store/actions/auth';\nimport { connect } from 'react-redux';\nimport { useForm } from \"react-hook-form\";\nimport axios from 'axios';\nimport GridLoader from \"react-spinners/ClipLoader\";\naxios.defaults.baseURL = 'http://127.0.0.1:8000/';\n\nfunction RegisterForm(props) {\n  const {\n    register,\n    handleSubmit,\n    errors,\n    watch\n  } = useForm();\n  const password = useRef({});\n  password.current = watch(\"password\", \"\");\n\n  const onSubmit = e => {\n    props.onAuth(e.username, e.email, e.password, e.confirm).then(() => {\n      if (localStorage.getItem(\"username\")) {\n        window.location.href = \"/profile\";\n      }\n    });\n  };\n\n  let errorMessage = null;\n\n  if (props.error) {\n    errorMessage = /*#__PURE__*/React.createElement(\"p\", {\n      className: \"error\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 13\n      }\n    }, \"Username/email already exist!\");\n  }\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }, props.loading && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    style: {\n      float: 'left',\n      marginRight: '1%',\n      marginLeft: '2%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }\n  }, \"Loading \"), /*#__PURE__*/React.createElement(GridLoader, {\n    size: 30,\n    css: {\n      float: 'left',\n      marginBottom: \"2%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }\n  })), errorMessage, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Username\",\n    name: \"username\",\n    ref: register({\n      required: \"Username is required\"\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 11\n    }\n  }), errors.username && /*#__PURE__*/React.createElement(\"p\", {\n    className: \"error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 31\n    }\n  }, errors.username.message), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Email\",\n    name: \"email\",\n    ref: register({\n      required: \"Email is required\",\n      pattern: {\n        value: /^[\\w-]+@([\\w-]+\\.)+[\\w-]{2,4}$/g,\n        message: \"Email is invalid\"\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 11\n    }\n  }), errors.email && /*#__PURE__*/React.createElement(\"p\", {\n    className: \"error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 28\n    }\n  }, errors.email.message), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"password\",\n    placeholder: \"Password\",\n    name: \"password\",\n    ref: register({\n      required: \"Password is required\",\n      minLength: {\n        value: 8,\n        message: \"Password should have minimum length of 8\"\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 11\n    }\n  }), errors.password && /*#__PURE__*/React.createElement(\"p\", {\n    className: \"error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 33\n    }\n  }, errors.password.message), /*#__PURE__*/React.createElement(\"input\", {\n    name: \"confirm\",\n    placeholder: \"Confirm Password\",\n    type: \"password\",\n    ref: register({\n      validate: value => value === password.current\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 11\n    }\n  }), errors.confirm && /*#__PURE__*/React.createElement(\"p\", {\n    className: \"error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 26\n    }\n  }, \"The passwords do not match\"), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    disabled: props.loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }, \"Sign Up\"));\n}\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.loading,\n    error: state.error\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (username, email, password1, password2) => {\n      return dispatch(actions.authSignup(username, email, password1, password2));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RegisterForm);","map":{"version":3,"sources":["/Users/darius/Desktop/orbital2020/frontend/src/components/login/Register.js"],"names":["React","useRef","actions","connect","useForm","axios","GridLoader","defaults","baseURL","RegisterForm","props","register","handleSubmit","errors","watch","password","current","onSubmit","e","onAuth","username","email","confirm","then","localStorage","getItem","window","location","href","errorMessage","error","loading","float","marginRight","marginLeft","marginBottom","required","message","pattern","value","minLength","validate","mapStateToProps","state","mapDispatchToProps","dispatch","password1","password2","authSignup"],"mappings":"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","sourcesContent":["import React, { useRef } from 'react';\nimport * as actions from '../../store/actions/auth'\nimport { connect } from 'react-redux'; \nimport {useForm} from \"react-hook-form\";\nimport axios from 'axios';\nimport GridLoader from \"react-spinners/ClipLoader\"\n\naxios.defaults.baseURL = 'http://127.0.0.1:8000/';\n\nfunction RegisterForm(props) {\n  const { register, handleSubmit, errors, watch } = useForm();\n  const password = useRef({});\n  password.current = watch(\"password\", \"\");\n\n  const onSubmit = e => {\n      props.onAuth(e.username, \n          e.email,\n          e.password,\n          e.confirm)\n          .then(() => {\n            if (localStorage.getItem(\"username\")) {\n              window.location.href = \"/profile\"\n            }\n            })\n    }\n\n  let errorMessage = null;\n    if (props.error) {\n        errorMessage = (\n            <p className = \"error\">Username/email already exist!</p>\n        )\n    }\n      return (\n        <form onSubmit = {handleSubmit(onSubmit)}>\n        { props.loading && \n                <div>    \n            <h4 style={{float:'left',marginRight:'1%',marginLeft:'2%'}}>Loading </h4>\n            <GridLoader size={30} css={{float:'left',marginBottom:\"2%\"}}/>\n            </div>\n            }\n            {errorMessage}\n          <input type=\"text\" \n          placeholder=\"Username\" \n          name=\"username\" \n          ref={register({required:\"Username is required\"})} />\n          {errors.username && <p className = \"error\">{errors.username.message}</p>}\n\n          <input type=\"text\" \n          placeholder=\"Email\" \n          name=\"email\" \n          ref={register({required:\"Email is required\", pattern:{value:/^[\\w-]+@([\\w-]+\\.)+[\\w-]{2,4}$/g,message:\"Email is invalid\"}})}/>\n          {errors.email && <p className = \"error\">{errors.email.message}</p>}\n\n          <input\n            type = \"password\"\n            placeholder=\"Password\"\n            name=\"password\"\n            ref={register({required:\"Password is required\",\n            minLength:{value:8,message:\"Password should have minimum length of 8\"}, \n            })}\n            />\n            {errors.password && <p className = \"error\">{errors.password.message}</p>}\n          <input\n        name=\"confirm\"\n        placeholder = \"Confirm Password\"\n        type=\"password\"\n        ref={register({\n          validate: value =>\n            value === password.current\n        })}\n      />\n      {errors.confirm && <p className = \"error\">The passwords do not match</p>}\n      <button type = \"submit\" disabled={props.loading}>Sign Up</button>\n        </form>\n      );\n\n}\n\nconst mapStateToProps = (state) => {\n  return {\n      loading: state.loading,\n      error: state.error\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAuth: (username, email, password1, password2) => {\n            return dispatch(actions.authSignup(username,email, password1,password2))\n        }\n    }\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(RegisterForm);\n"]},"metadata":{},"sourceType":"module"}